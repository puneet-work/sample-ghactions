name: Publish artifacts

on:
  push:
    branches:
      - main

jobs:
  tag-release:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Tag and Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release@v17.3.8

  build:
    strategy:
      matrix:
        dockerfile: [image-upload/Dockerfile]
    runs-on: ubuntu-20.04
    needs: [ tag-release ]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Determine version
        id: version
        run: echo ::set-output name=version::$(git describe --abbrev=0 --tags | sed 's/v//g')

      - name: print version
        run: |
          echo "The version is ${{ steps.version.outputs.version }}"

      - name: Install necessary packages
        run: |
          echo "11"
          jq --version > /dev/null || curl -sS https://webinstall.dev/jq | bash
          sudo apt-get -y install coreutils notary
          echo "12"

      - name: Login to Dockerhub registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Setup docker trust keys
        run: |
          base64 --help
          key_dir=$HOME/.docker/trust/private
          mkdir -p ${key_dir}

          echo "${{ secrets.DOCKER_REPOSITORY_KEY }}" | base64 -d > ${key_dir}/${{ secrets.DOCKER_REPOSITORY_KEY_ID }}.key;
          chmod 600 ${key_dir}/${{ secrets.DOCKER_REPOSITORY_KEY_ID }}.key

          echo "${{ secrets.DOCKER_SIGNER_KEY }}" | base64 -d > ${key_dir}/${{ secrets.DOCKER_SIGNER_KEY_ID }}.key;
          chmod 600 ${key_dir}/${{ secrets.DOCKER_SIGNER_KEY_ID }}.key

      - name: Load the repository key
        run: |
          key_dir="$HOME/.docker/trust/private"
          docker trust key load "${key_dir}"/${{ secrets.DOCKER_REPOSITORY_KEY_ID }}.key
        env:
          DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ${{ secrets.DOCKER_TRUST_REPOSITORY_PASSPHRASE }}

      - name: Load signer key
        run: |
          key_dir="$HOME/.docker/trust/private"
          docker trust key load "${key_dir}"/${{ secrets.DOCKER_SIGNER_KEY_ID }}.key
        env:
          DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ${{ secrets.DOCKER_TRUST_SIGNER_PASSPHRASE }}

      - name: Build and push amd64 image
        run: |
          docker build --platform linux/amd64 -t itspuneet59/sample-actions:${{ steps.version.outputs.version }}-amd64 -f ${{matrix.dockerfile}} ./image-upload
          docker push itspuneet59/sample-actions:${{ steps.version.outputs.version }}-amd64
        # uses: docker/build-push-action@v2
        # with:
        #   push: false
        #   context: .
        #   file: ${{matrix.dockerfile}}
        #   platforms: linux/amd64
        #   tags: itspuneet59/sample-actions:${{ steps.version.outputs.version }}-amd64
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_CONTENT_TRUST: 1
          DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ${{ secrets.DOCKER_TRUST_SIGNER_PASSPHRASE }}

      - name: Build and push arm64 image
        run: |
          docker build --platform linux/arm64 -t itspuneet59/sample-actions:${{ steps.version.outputs.version }}-arm64 -f ${{matrix.dockerfile}} ./image-upload
          docker push itspuneet59/sample-actions:${{ steps.version.outputs.version }}-arm64
        # uses: docker/build-push-action@v2
        # with:
        #   push: false
        #   context: .
        #   file: ${{matrix.dockerfile}}
        #   platforms: linux/arm64
        #   tags: itspuneet59/sample-actions:${{ steps.version.outputs.version }}-arm64
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_CONTENT_TRUST: 1
          DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ${{ secrets.DOCKER_TRUST_SIGNER_PASSPHRASE }}

      - name: create a manifest and push
        id: manifest
        run: |
          set -eu

          docker manifest create itspuneet59/sample-actions:${{ steps.version.outputs.version }} \
            itspuneet59/sample-actions:"${{ steps.version.outputs.version }}-amd64" \
            itspuneet59/sample-actions:"${{ steps.version.outputs.version }}-arm64"
          manifest_sha=$(docker manifest push itspuneet59/sample-actions:${{ steps.version.outputs.version }} --purge | cut -d':' -f2)
          echo ::set-output name=manifest_sha::${manifest_sha}
          manifest_numbytes=$(docker manifest inspect itspuneet59/sample-actions:${{ steps.version.outputs.version }} -v | jq -r '.[].Descriptor.size' | head -1)
          echo ::set-output name=manifest_numbytes::${manifest_numbytes}
      - name: sign an image
        run: |
          set -eu
          export NOTARY_AUTH=$(echo "${{ secrets.DOCKERHUB_USER }}:${{ secrets.DOCKERHUB_PASSWORD }}" | base64)
          echo "sha: ${{ steps.manifest.outputs.manifest_sha }}"
          echo "numbytes: ${{ steps.manifest.outputs.manifest_numbytes }}"
          # run notary command to sign
          notary -d $HOME/.docker/trust/ -s "${{ env.NOTARY_SERVER_URL }}" addhash docker.io/itspuneet59/sample-actions ${{ steps.version.outputs.version }} \
            ${{ steps.manifest.outputs.manifest_numbytes }} --sha256 ${{ steps.manifest.outputs.manifest_sha }} --publish --verbose;
        env:
          DOCKER_CONTENT_TRUST: 1
          NOTARY_SERVER_URL: 'https://notary.docker.io'
          NOTARY_TARGETS_PASSPHRASE: ${{ secrets.DOCKER_TRUST_REPOSITORY_PASSPHRASE }}
